
nnoremap <space> <Nop>
let mapleader = " "

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch



"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc


"Intellij environment variables
set ideastatusicon=gray
set ideawrite=file
set ideaput
set ideajoin

" Configure the vim environment
set relativenumber
set number
set incsearch


set hlsearch          " highlight searches by default
set encoding=utf-8 fileencodings= " use utf8 by default
set history=1000               "store lots of :cmdline history
set showmode

set scrolloff=5
set visualbell
set noerrorbells

" Active emulated plugins
"set commentary
Plug 'tpope/vim-commentary'
"set multiple-cursors
Plug 'terryma/vim-multiple-cursors'
"set surround
Plug 'tpope/vim-surround'
"set easymotion
Plug 'easymotion/vim-easymotion'
"set NERDTree
Plug 'preservim/nerdtree'
"set highlightedyank
Plug 'machakann/vim-highlightedyank'
" set ReplaceWithRegister

" KEYMAPPINGS!
nnoremap <leader>ie :e C:/Users/LefrancoisC/.ideavimrc<cr>
nnoremap <leader>ir :action IdeaVim.ReloadVimRc.reload<cr>

" map \b <Action>(ToggleLineBreakpoint)
map <c-z> <Action>(ToggleDistractionFreeMode)<CR>


"New file management
map <leader>fc <Action>(NewClass)
map <leader>fe :NERDTree<cr>
nnoremap <leader>ff :action GotoFile<CR>
map <leader>fn <Action>(NewFile)
nnoremap <leader>fp :action FindInPath<CR>
nnoremap <leader>fs :action SelectInProjectView<CR>

" Window management
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <a-,> <Action>(PreviousTab)
map <a-.> <Action>(NextTab)

" Motion key mappings
map L $
map H ^
nnoremap Y y$


" Remove some fat finger typing mistakes
nmap :X :x
nmap :X! :x!
nmap :W :w
nmap :W! :w!
nmap :Q :q
nmap :Q! :q!
nmap :Qa :qa
nmap :Wq! :wq!
nmap :WQ! :wq!

" Break the Habit of Reaching for the Arrow Keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" NewLine stuff
nmap <S-Enter> O<Esc>j
nmap <C-Enter> o<Esc>k
nmap <Enter> i<Enter><Esc>

" Map IDE keymapping to VIM or IDE"
sethandler <C-q> a:ide " Open function documentation popup
sethandler <C-w> a:ide " Open function documentation popup
sethandler <C-h> a:vim " Window management
sethandler <C-j> a:vim " Window management
sethandler <C-k> a:vim " Window management
sethandler <C-l> a:vim " Window management

" Git
" map <Leader>Gc <Action>(Git.Commit.Stage)

" Gradle
" map <Leader>Gr <Action>(Gradle.RefreshDependencies)

" Code
map <Leader>ci <Action>(OptimizeImports)
map <leader>cf <Action>(ReformatCode)

" Troubleshooting
map gC <Action>(GotoClass)
map gi <Action>(GotoImplementation)
map gd <Action>(GotoDeclaration)
map gp <Action>(GotoSuperMethod)
map gt <Action>(GotoTest)
map ge <Action>(GotoNextError)
map gE <Action>(GotoPreviousError)
map gf <Action>(Forward)
map gk <Action>(ShowErrorDescription)
map gs <Action>(FileStructurePopup)
map gu <Action>(FindUsages)
map gr <Action>(ExternalSystem.RefreshAllProjects)

map <leader>rd <Action>(Debug)
map <leader>rr <Action>(Run)
map <leader>db <Action>(ToggleLineBreakpoint)
map K <Action>(QuickJavaDoc)
""    vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
""    vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
""    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
""    vim.keymap.set('n', '<space>K', vim.lsp.buf.signature_help, bufopts)
""    vim.keymap.set('n', 'gt', vim.lsp.buf.type_definition, bufopts)
""    vim.keymap.set('n', '<F2>', vim.lsp.buf.rename, bufopts)
""    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
""    vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
""    vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
""    vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
""    vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)